package biz

import (
	"errors"

	"github.com/blackhorseya/pelith-assessment/entity/domain/core/model"
)

// User is an aggregate root that represents the user.
type User struct {
	model.User

	tasks        []*Task
	rewards      []*Reward
	transactions TransactionList
}

// NewUser creates a new User aggregate.
func NewUser(address string) (*User, error) {
	if address == "" {
		return nil, errors.New("address cannot be empty")
	}

	return &User{
		User: model.User{
			Id:           "", // id is generated by the repository
			Address:      address,
			TaskProgress: make(map[string]bool),
		},
	}, nil
}

// CompleteTask updates the user's progress and awards points for a completed task.
func (u *User) CompleteTask(taskID string, points int64) error {
	if u.TaskProgress[taskID] {
		return errors.New("task already completed")
	}
	u.TaskProgress[taskID] = true
	u.Points += points
	return nil
}
