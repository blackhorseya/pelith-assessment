// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -destination=./mock_service.go -package=biz -source=service.go
//

// Package biz is a generated GoMock package.
package biz

import (
	context "context"
	reflect "reflect"
	time "time"

	model "github.com/blackhorseya/pelith-assessment/entity/domain/core/model"
	gomock "go.uber.org/mock/gomock"
)

// MockTaskService is a mock of TaskService interface.
type MockTaskService struct {
	ctrl     *gomock.Controller
	recorder *MockTaskServiceMockRecorder
}

// MockTaskServiceMockRecorder is the mock recorder for MockTaskService.
type MockTaskServiceMockRecorder struct {
	mock *MockTaskService
}

// NewMockTaskService creates a new mock instance.
func NewMockTaskService(ctrl *gomock.Controller) *MockTaskService {
	mock := &MockTaskService{ctrl: ctrl}
	mock.recorder = &MockTaskServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskService) EXPECT() *MockTaskServiceMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockTaskService) CreateTask(c context.Context, campaign *Campaign, name, description string, taskType model.TaskType, minAmount float64, poolID string) (*Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", c, campaign, name, description, taskType, minAmount, poolID)
	ret0, _ := ret[0].(*Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTaskServiceMockRecorder) CreateTask(c, campaign, name, description, taskType, minAmount, poolID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTaskService)(nil).CreateTask), c, campaign, name, description, taskType, minAmount, poolID)
}

// MockCampaignService is a mock of CampaignService interface.
type MockCampaignService struct {
	ctrl     *gomock.Controller
	recorder *MockCampaignServiceMockRecorder
}

// MockCampaignServiceMockRecorder is the mock recorder for MockCampaignService.
type MockCampaignServiceMockRecorder struct {
	mock *MockCampaignService
}

// NewMockCampaignService creates a new mock instance.
func NewMockCampaignService(ctrl *gomock.Controller) *MockCampaignService {
	mock := &MockCampaignService{ctrl: ctrl}
	mock.recorder = &MockCampaignServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCampaignService) EXPECT() *MockCampaignServiceMockRecorder {
	return m.recorder
}

// CreateCampaign mocks base method.
func (m *MockCampaignService) CreateCampaign(c context.Context, name string, startAt time.Time, mode model.CampaignMode, targetPool string, minAmount float64) (*Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCampaign", c, name, startAt, mode, targetPool, minAmount)
	ret0, _ := ret[0].(*Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCampaign indicates an expected call of CreateCampaign.
func (mr *MockCampaignServiceMockRecorder) CreateCampaign(c, name, startAt, mode, targetPool, minAmount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCampaign", reflect.TypeOf((*MockCampaignService)(nil).CreateCampaign), c, name, startAt, mode, targetPool, minAmount)
}

// MockRewardService is a mock of RewardService interface.
type MockRewardService struct {
	ctrl     *gomock.Controller
	recorder *MockRewardServiceMockRecorder
}

// MockRewardServiceMockRecorder is the mock recorder for MockRewardService.
type MockRewardServiceMockRecorder struct {
	mock *MockRewardService
}

// NewMockRewardService creates a new mock instance.
func NewMockRewardService(ctrl *gomock.Controller) *MockRewardService {
	mock := &MockRewardService{ctrl: ctrl}
	mock.recorder = &MockRewardServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRewardService) EXPECT() *MockRewardServiceMockRecorder {
	return m.recorder
}

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// RegisterUser mocks base method.
func (m *MockUserService) RegisterUser(c context.Context, username, address string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", c, username, address)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockUserServiceMockRecorder) RegisterUser(c, username, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockUserService)(nil).RegisterUser), c, username, address)
}

// UpdateUserProgress mocks base method.
func (m *MockUserService) UpdateUserProgress(c context.Context, userID, taskID string, completed bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProgress", c, userID, taskID, completed)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserProgress indicates an expected call of UpdateUserProgress.
func (mr *MockUserServiceMockRecorder) UpdateUserProgress(c, userID, taskID, completed any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProgress", reflect.TypeOf((*MockUserService)(nil).UpdateUserProgress), c, userID, taskID, completed)
}

// MockBacktestService is a mock of BacktestService interface.
type MockBacktestService struct {
	ctrl     *gomock.Controller
	recorder *MockBacktestServiceMockRecorder
}

// MockBacktestServiceMockRecorder is the mock recorder for MockBacktestService.
type MockBacktestServiceMockRecorder struct {
	mock *MockBacktestService
}

// NewMockBacktestService creates a new mock instance.
func NewMockBacktestService(ctrl *gomock.Controller) *MockBacktestService {
	mock := &MockBacktestService{ctrl: ctrl}
	mock.recorder = &MockBacktestServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBacktestService) EXPECT() *MockBacktestServiceMockRecorder {
	return m.recorder
}

// RunBacktest mocks base method.
func (m *MockBacktestService) RunBacktest(c context.Context, campaign *Campaign, resultCh chan<- *model.Reward) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunBacktest", c, campaign, resultCh)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunBacktest indicates an expected call of RunBacktest.
func (mr *MockBacktestServiceMockRecorder) RunBacktest(c, campaign, resultCh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunBacktest", reflect.TypeOf((*MockBacktestService)(nil).RunBacktest), c, campaign, resultCh)
}

// MockTransactionService is a mock of TransactionService interface.
type MockTransactionService struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionServiceMockRecorder
}

// MockTransactionServiceMockRecorder is the mock recorder for MockTransactionService.
type MockTransactionServiceMockRecorder struct {
	mock *MockTransactionService
}

// NewMockTransactionService creates a new mock instance.
func NewMockTransactionService(ctrl *gomock.Controller) *MockTransactionService {
	mock := &MockTransactionService{ctrl: ctrl}
	mock.recorder = &MockTransactionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionService) EXPECT() *MockTransactionServiceMockRecorder {
	return m.recorder
}

// ProcessTransaction mocks base method.
func (m *MockTransactionService) ProcessTransaction(ctx context.Context, transaction *Transaction, user *User, task *Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessTransaction", ctx, transaction, user, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessTransaction indicates an expected call of ProcessTransaction.
func (mr *MockTransactionServiceMockRecorder) ProcessTransaction(ctx, transaction, user, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessTransaction", reflect.TypeOf((*MockTransactionService)(nil).ProcessTransaction), ctx, transaction, user, task)
}
