package biz

import (
	"errors"

	"github.com/blackhorseya/pelith-assessment/entity/domain/core/model"
)

// Task is an aggregate root that represents the task.
type Task struct {
	model.Task

	CampaignID string
	Progress   int
}

// NewTask creates a new Task aggregate.
func NewTask(
	name, description string,
	taskType model.TaskType,
	minAmount float64,
	poolID string,
) (*Task, error) {
	if name == "" {
		return nil, errors.New("name is required")
	}

	return &Task{
		Task: model.Task{
			Id:          "", // id will be generated by the repository
			Name:        name,
			Description: description,
			Type:        taskType,
			Criteria: &model.TaskCriteria{
				MinTransactionAmount: minAmount,
				PoolId:               poolID,
			},
			Status: model.TaskStatus_TASK_STATUS_ACTIVE,
		},
	}, nil
}

// NewTaskOfOnboarding creates a new Task aggregate for onboarding.
func NewTaskOfOnboarding(name, description string, minAmount float64, poolID string) (*Task, error) {
	return NewTask(name, description, model.TaskType_TASK_TYPE_ONBOARDING, minAmount, poolID)
}

// NewTaskOfSharePool creates a new Task aggregate for sharing a pool.
func NewTaskOfSharePool(name, description string, poolID string) (*Task, error) {
	return NewTask(name, description, model.TaskType_TASK_TYPE_SHARE_POOL, 0, poolID)
}

// CalculateProgress calculates the progress of a task based on the given amount.
func (t *Task) CalculateProgress(amount float64) int {
	if t.Criteria == nil || t.Criteria.MinTransactionAmount == 0 {
		return 0
	}

	progress := int((amount / t.Criteria.MinTransactionAmount) * 100)
	if progress > 100 {
		progress = 100
	}

	return progress
}

// Deactivate marks the task as inactive.
func (t *Task) Deactivate() {
	t.Status = model.TaskStatus_TASK_STATUS_INACTIVE
}
