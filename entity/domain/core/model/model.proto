syntax = "proto3";

package entity.domain.core.model;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/blackhorseya/pelith-assessment/entity/domain/core/model;model";

// Task entity
message Task {
  // Unique identifier for the task
  // @gotags: db:"id"
  string id = 1;

  // Task name (e.g., "Onboarding Task")
  // @gotags: db:"name"
  string name = 2;

  // Task description
  // @gotags: db:"description"
  string description = 3;

  // Task type
  // @gotags: db:"type"
  TaskType type = 4;

  // Criteria for task completion
  // @gotags: db:"criteria"
  TaskCriteria criteria = 5;

  // Task status
  // @gotags: db:"status"
  TaskStatus status = 6;
}

// Enum for task types
enum TaskType {
  TASK_TYPE_UNSPECIFIED = 0;  // Default value
  TASK_TYPE_ONBOARDING = 1;   // Onboarding task
  TASK_TYPE_SHARE_POOL = 2;   // Share pool task
}

// Enum for task statuses
enum TaskStatus {
  TASK_STATUS_UNSPECIFIED = 0; // Default value
  TASK_STATUS_ACTIVE = 1;      // Task is active
  TASK_STATUS_INACTIVE = 2;    // Task is inactive
}

// Task criteria
message TaskCriteria {
  // Minimum transaction amount to complete the task
  double min_transaction_amount = 1;

  // Optional pool ID for pool-specific tasks
  string pool_id = 2;
}

// Task result
message TaskResult {
  // Task ID
  string task_id = 1;

  // User ID
  string user_id = 2;

  // Task progress (e.g., percentage)
  int64 progress = 3;
}

// Campaign entity
message Campaign {
  // Campaign ID
  // @gotags: db:"id"
  string id = 1;

  // Campaign name
  // @gotags: db:"name"
  string name = 2;

  // Campaign description
  // @gotags: db:"description"
  string description = 3;

  // Campaign start time
  // @gotags: db:"start_time"
  google.protobuf.Timestamp start_time = 4;

  // Campaign end time
  // @gotags: db:"end_time"
  google.protobuf.Timestamp end_time = 5;

  // Associated tasks
  // @gotags: db:"tasks"
  repeated Task tasks = 6;

  // Campaign mode
  // @gotags: db:"mode"
  CampaignMode mode = 7;

  // Campaign status
  // @gotags: db:"status"
  CampaignStatus status = 8;

  // Pool ID (if applicable)
  string pool_id = 9;
}

// Enum for campaign modes
enum CampaignMode {
  CAMPAIGN_MODE_UNSPECIFIED = 0;  // Default value
  CAMPAIGN_MODE_REAL_TIME = 1;    // Real-time campaign
  CAMPAIGN_MODE_BACKTEST = 2;     // Backtest campaign
}

// Enum for campaign statuses
enum CampaignStatus {
  CAMPAIGN_STATUS_UNSPECIFIED = 0; // Default value
  CAMPAIGN_STATUS_PENDING = 1;     // Campaign pending
  CAMPAIGN_STATUS_ACTIVE = 2;      // Campaign active
  CAMPAIGN_STATUS_COMPLETED = 3;   // Campaign completed
}

// User entity
message User {
  // User ID
  string id = 1;

  // User name
  string name = 2;

  // Blockchain wallet address
  string address = 3;

  // Task completion status by task ID
  map<string, int64> task_progress = 4;

  // Total points earned
  int64 points = 5;

  // Associated transaction IDs
  repeated string transaction_ids = 6;
}

// Reward entity
message Reward {
  // Reward ID
  string id = 1;

  // Associated user ID
  string user_address = 2;

  // Associated campaign ID
  string campaign_id = 3;

  // Points used to redeem the reward
  int64 points = 4;

  // Redemption timestamp
  google.protobuf.Timestamp redeemed_at = 5;
}

// Transaction entity
message Transaction {
  // Transaction hash (unique ID)
  // @gotags: db:"tx_hash"
  string tx_hash = 1;

  // Block number
  int64 block_number = 11;

  // Sender address
  // @gotags: db:"from_address"
  string from_address = 2;

  // Receiver address
  // @gotags: db:"to_address"
  string to_address = 3;

  // Transaction amount
  // @gotags: db:"amount"
  int64 amount = 4;

  // Transaction timestamp
  // @gotags: db:"timestamp"
  google.protobuf.Timestamp timestamp = 5;

  // Task ID (optional)
  // @gotags: db:"task_id"
  string task_id = 6;

  // Campaign ID (optional)
  // @gotags: db:"campaign_id"
  string campaign_id = 7;

  // Transaction status
  // @gotags: db:"status"
  TransactionStatus status = 8;

  // Transaction type
  // @gotags: db:"type"
  TransactionType type = 9;

  // Swap details (if applicable)
  repeated SwapDetail swap_details = 10;
}

// Enum for transaction statuses
enum TransactionStatus {
  TRANSACTION_STATUS_UNSPECIFIED = 0; // Default value
  TRANSACTION_STATUS_PENDING = 1;     // Transaction pending
  TRANSACTION_STATUS_COMPLETED = 2;   // Transaction completed
  TRANSACTION_STATUS_FAILED = 3;      // Transaction failed
}

// Enum for transaction types
enum TransactionType {
  TRANSACTION_TYPE_UNSPECIFIED = 0;  // Default value
  TRANSACTION_TYPE_TRANSFER = 1;     // Transfer
  TRANSACTION_TYPE_SWAP = 2;         // Swap
  TRANSACTION_TYPE_OTHER = 3;        // Other
}

// Swap details
message SwapDetail {
  // Token address being swapped from
  string from_token_address = 1;

  // Token address being swapped to
  string to_token_address = 2;

  // Amount of the from_token
  string from_token_amount = 3;

  // Amount of the to_token
  string to_token_amount = 4;

  // Pool address (if applicable)
  string pool_address = 5;
}

// Backtest result for a specific user
message BacktestResult {
  // User ID associated with the result
  string user_id = 1;

  // Total swaps performed by the user
  int32 total_swaps = 2;

  // Total volume of swaps (USD)
  double total_volume = 3;

  // Points earned by the user
  int64 points_earned = 4;

  // Task completion status
  map<string, int64 > task_progress = 5;
}

// Backtest report for a campaign
message BacktestReport {
  // Unique ID for the report
  string id = 1;

  // Associated campaign ID
  string campaign_id = 2;

  // Total users involved in the backtest
  int32 total_users = 3;

  // Total points distributed
  int64 total_points = 4;

  // Timestamp for when the report was generated
  google.protobuf.Timestamp generated_at = 5;

  // List of individual backtest results
  repeated BacktestResult user_results = 6;
}
