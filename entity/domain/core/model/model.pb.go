// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: entity/domain/core/model/model.proto

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum for task types
type TaskType int32

const (
	TaskType_TASK_TYPE_UNSPECIFIED TaskType = 0 // Default value
	TaskType_TASK_TYPE_ONBOARDING  TaskType = 1 // Onboarding task
	TaskType_TASK_TYPE_SHARE_POOL  TaskType = 2 // Share pool task
)

// Enum value maps for TaskType.
var (
	TaskType_name = map[int32]string{
		0: "TASK_TYPE_UNSPECIFIED",
		1: "TASK_TYPE_ONBOARDING",
		2: "TASK_TYPE_SHARE_POOL",
	}
	TaskType_value = map[string]int32{
		"TASK_TYPE_UNSPECIFIED": 0,
		"TASK_TYPE_ONBOARDING":  1,
		"TASK_TYPE_SHARE_POOL":  2,
	}
)

func (x TaskType) Enum() *TaskType {
	p := new(TaskType)
	*p = x
	return p
}

func (x TaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_entity_domain_core_model_model_proto_enumTypes[0].Descriptor()
}

func (TaskType) Type() protoreflect.EnumType {
	return &file_entity_domain_core_model_model_proto_enumTypes[0]
}

func (x TaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskType.Descriptor instead.
func (TaskType) EnumDescriptor() ([]byte, []int) {
	return file_entity_domain_core_model_model_proto_rawDescGZIP(), []int{0}
}

// Enum for task statuses
type TaskStatus int32

const (
	TaskStatus_TASK_STATUS_UNSPECIFIED TaskStatus = 0 // Default value
	TaskStatus_TASK_STATUS_ACTIVE      TaskStatus = 1 // Task is active
	TaskStatus_TASK_STATUS_INACTIVE    TaskStatus = 2 // Task is inactive
)

// Enum value maps for TaskStatus.
var (
	TaskStatus_name = map[int32]string{
		0: "TASK_STATUS_UNSPECIFIED",
		1: "TASK_STATUS_ACTIVE",
		2: "TASK_STATUS_INACTIVE",
	}
	TaskStatus_value = map[string]int32{
		"TASK_STATUS_UNSPECIFIED": 0,
		"TASK_STATUS_ACTIVE":      1,
		"TASK_STATUS_INACTIVE":    2,
	}
)

func (x TaskStatus) Enum() *TaskStatus {
	p := new(TaskStatus)
	*p = x
	return p
}

func (x TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_entity_domain_core_model_model_proto_enumTypes[1].Descriptor()
}

func (TaskStatus) Type() protoreflect.EnumType {
	return &file_entity_domain_core_model_model_proto_enumTypes[1]
}

func (x TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatus.Descriptor instead.
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_entity_domain_core_model_model_proto_rawDescGZIP(), []int{1}
}

// Enum for campaign modes
type CampaignMode int32

const (
	CampaignMode_CAMPAIGN_MODE_UNSPECIFIED CampaignMode = 0 // Default value
	CampaignMode_CAMPAIGN_MODE_REAL_TIME   CampaignMode = 1 // Real-time campaign
	CampaignMode_CAMPAIGN_MODE_BACKTEST    CampaignMode = 2 // Backtest campaign
)

// Enum value maps for CampaignMode.
var (
	CampaignMode_name = map[int32]string{
		0: "CAMPAIGN_MODE_UNSPECIFIED",
		1: "CAMPAIGN_MODE_REAL_TIME",
		2: "CAMPAIGN_MODE_BACKTEST",
	}
	CampaignMode_value = map[string]int32{
		"CAMPAIGN_MODE_UNSPECIFIED": 0,
		"CAMPAIGN_MODE_REAL_TIME":   1,
		"CAMPAIGN_MODE_BACKTEST":    2,
	}
)

func (x CampaignMode) Enum() *CampaignMode {
	p := new(CampaignMode)
	*p = x
	return p
}

func (x CampaignMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CampaignMode) Descriptor() protoreflect.EnumDescriptor {
	return file_entity_domain_core_model_model_proto_enumTypes[2].Descriptor()
}

func (CampaignMode) Type() protoreflect.EnumType {
	return &file_entity_domain_core_model_model_proto_enumTypes[2]
}

func (x CampaignMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CampaignMode.Descriptor instead.
func (CampaignMode) EnumDescriptor() ([]byte, []int) {
	return file_entity_domain_core_model_model_proto_rawDescGZIP(), []int{2}
}

// Enum for campaign statuses
type CampaignStatus int32

const (
	CampaignStatus_CAMPAIGN_STATUS_UNSPECIFIED CampaignStatus = 0 // Default value
	CampaignStatus_CAMPAIGN_STATUS_PENDING     CampaignStatus = 1 // Campaign pending
	CampaignStatus_CAMPAIGN_STATUS_ACTIVE      CampaignStatus = 2 // Campaign active
	CampaignStatus_CAMPAIGN_STATUS_COMPLETED   CampaignStatus = 3 // Campaign completed
)

// Enum value maps for CampaignStatus.
var (
	CampaignStatus_name = map[int32]string{
		0: "CAMPAIGN_STATUS_UNSPECIFIED",
		1: "CAMPAIGN_STATUS_PENDING",
		2: "CAMPAIGN_STATUS_ACTIVE",
		3: "CAMPAIGN_STATUS_COMPLETED",
	}
	CampaignStatus_value = map[string]int32{
		"CAMPAIGN_STATUS_UNSPECIFIED": 0,
		"CAMPAIGN_STATUS_PENDING":     1,
		"CAMPAIGN_STATUS_ACTIVE":      2,
		"CAMPAIGN_STATUS_COMPLETED":   3,
	}
)

func (x CampaignStatus) Enum() *CampaignStatus {
	p := new(CampaignStatus)
	*p = x
	return p
}

func (x CampaignStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CampaignStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_entity_domain_core_model_model_proto_enumTypes[3].Descriptor()
}

func (CampaignStatus) Type() protoreflect.EnumType {
	return &file_entity_domain_core_model_model_proto_enumTypes[3]
}

func (x CampaignStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CampaignStatus.Descriptor instead.
func (CampaignStatus) EnumDescriptor() ([]byte, []int) {
	return file_entity_domain_core_model_model_proto_rawDescGZIP(), []int{3}
}

// Enum for transaction statuses
type TransactionStatus int32

const (
	TransactionStatus_TRANSACTION_STATUS_UNSPECIFIED TransactionStatus = 0 // Default value
	TransactionStatus_TRANSACTION_STATUS_PENDING     TransactionStatus = 1 // Transaction pending
	TransactionStatus_TRANSACTION_STATUS_COMPLETED   TransactionStatus = 2 // Transaction completed
	TransactionStatus_TRANSACTION_STATUS_FAILED      TransactionStatus = 3 // Transaction failed
)

// Enum value maps for TransactionStatus.
var (
	TransactionStatus_name = map[int32]string{
		0: "TRANSACTION_STATUS_UNSPECIFIED",
		1: "TRANSACTION_STATUS_PENDING",
		2: "TRANSACTION_STATUS_COMPLETED",
		3: "TRANSACTION_STATUS_FAILED",
	}
	TransactionStatus_value = map[string]int32{
		"TRANSACTION_STATUS_UNSPECIFIED": 0,
		"TRANSACTION_STATUS_PENDING":     1,
		"TRANSACTION_STATUS_COMPLETED":   2,
		"TRANSACTION_STATUS_FAILED":      3,
	}
)

func (x TransactionStatus) Enum() *TransactionStatus {
	p := new(TransactionStatus)
	*p = x
	return p
}

func (x TransactionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_entity_domain_core_model_model_proto_enumTypes[4].Descriptor()
}

func (TransactionStatus) Type() protoreflect.EnumType {
	return &file_entity_domain_core_model_model_proto_enumTypes[4]
}

func (x TransactionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionStatus.Descriptor instead.
func (TransactionStatus) EnumDescriptor() ([]byte, []int) {
	return file_entity_domain_core_model_model_proto_rawDescGZIP(), []int{4}
}

// Enum for transaction types
type TransactionType int32

const (
	TransactionType_TRANSACTION_TYPE_UNSPECIFIED TransactionType = 0 // Default value
	TransactionType_TRANSACTION_TYPE_TRANSFER    TransactionType = 1 // Transfer
	TransactionType_TRANSACTION_TYPE_SWAP        TransactionType = 2 // Swap
	TransactionType_TRANSACTION_TYPE_OTHER       TransactionType = 3 // Other
)

// Enum value maps for TransactionType.
var (
	TransactionType_name = map[int32]string{
		0: "TRANSACTION_TYPE_UNSPECIFIED",
		1: "TRANSACTION_TYPE_TRANSFER",
		2: "TRANSACTION_TYPE_SWAP",
		3: "TRANSACTION_TYPE_OTHER",
	}
	TransactionType_value = map[string]int32{
		"TRANSACTION_TYPE_UNSPECIFIED": 0,
		"TRANSACTION_TYPE_TRANSFER":    1,
		"TRANSACTION_TYPE_SWAP":        2,
		"TRANSACTION_TYPE_OTHER":       3,
	}
)

func (x TransactionType) Enum() *TransactionType {
	p := new(TransactionType)
	*p = x
	return p
}

func (x TransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_entity_domain_core_model_model_proto_enumTypes[5].Descriptor()
}

func (TransactionType) Type() protoreflect.EnumType {
	return &file_entity_domain_core_model_model_proto_enumTypes[5]
}

func (x TransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionType.Descriptor instead.
func (TransactionType) EnumDescriptor() ([]byte, []int) {
	return file_entity_domain_core_model_model_proto_rawDescGZIP(), []int{5}
}

// Task entity
type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the task
	// @gotags: db:"id" bson:"_id"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" db:"id" bson:"_id"`
	// Task name (e.g., "Onboarding Task")
	// @gotags: db:"name" bson:"name"
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" db:"name" bson:"name"`
	// Task description
	// @gotags: db:"description" bson:"description"
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" db:"description" bson:"description"`
	// Task type
	// @gotags: db:"type" bson:"type"
	Type TaskType `protobuf:"varint,4,opt,name=type,proto3,enum=entity.domain.core.model.TaskType" json:"type,omitempty" db:"type" bson:"type"`
	// Criteria for task completion
	// @gotags: db:"criteria" bson:"criteria"
	Criteria *TaskCriteria `protobuf:"bytes,5,opt,name=criteria,proto3" json:"criteria,omitempty" db:"criteria" bson:"criteria"`
	// Task status
	// @gotags: db:"status" bson:"status"
	Status TaskStatus `protobuf:"varint,6,opt,name=status,proto3,enum=entity.domain.core.model.TaskStatus" json:"status,omitempty" db:"status" bson:"status"`
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_entity_domain_core_model_model_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_entity_domain_core_model_model_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_entity_domain_core_model_model_proto_rawDescGZIP(), []int{0}
}

func (x *Task) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Task) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Task) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Task) GetType() TaskType {
	if x != nil {
		return x.Type
	}
	return TaskType_TASK_TYPE_UNSPECIFIED
}

func (x *Task) GetCriteria() *TaskCriteria {
	if x != nil {
		return x.Criteria
	}
	return nil
}

func (x *Task) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_TASK_STATUS_UNSPECIFIED
}

// Task criteria
type TaskCriteria struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum transaction amount to complete the task
	// @gotags: db:"min_transaction_amount" bson:"min_transaction_amount"
	MinTransactionAmount float64 `protobuf:"fixed64,1,opt,name=min_transaction_amount,json=minTransactionAmount,proto3" json:"min_transaction_amount,omitempty" db:"min_transaction_amount" bson:"min_transaction_amount"`
	// Optional pool ID for pool-specific tasks
	// @gotags: db:"pool_id" bson:"pool_id"
	PoolId string `protobuf:"bytes,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" db:"pool_id" bson:"pool_id"`
}

func (x *TaskCriteria) Reset() {
	*x = TaskCriteria{}
	mi := &file_entity_domain_core_model_model_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskCriteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCriteria) ProtoMessage() {}

func (x *TaskCriteria) ProtoReflect() protoreflect.Message {
	mi := &file_entity_domain_core_model_model_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCriteria.ProtoReflect.Descriptor instead.
func (*TaskCriteria) Descriptor() ([]byte, []int) {
	return file_entity_domain_core_model_model_proto_rawDescGZIP(), []int{1}
}

func (x *TaskCriteria) GetMinTransactionAmount() float64 {
	if x != nil {
		return x.MinTransactionAmount
	}
	return 0
}

func (x *TaskCriteria) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

// Task result
type TaskResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Task ID
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// User ID
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Task progress (e.g., percentage)
	Progress int64 `protobuf:"varint,3,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (x *TaskResult) Reset() {
	*x = TaskResult{}
	mi := &file_entity_domain_core_model_model_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResult) ProtoMessage() {}

func (x *TaskResult) ProtoReflect() protoreflect.Message {
	mi := &file_entity_domain_core_model_model_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResult.ProtoReflect.Descriptor instead.
func (*TaskResult) Descriptor() ([]byte, []int) {
	return file_entity_domain_core_model_model_proto_rawDescGZIP(), []int{2}
}

func (x *TaskResult) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskResult) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TaskResult) GetProgress() int64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

// Campaign entity
type Campaign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Campaign ID
	// @gotags: db:"id" bson:"_id"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" db:"id" bson:"_id"`
	// Campaign name
	// @gotags: db:"name" bson:"name"
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" db:"name" bson:"name"`
	// Campaign description
	// @gotags: db:"description" bson:"description"
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" db:"description" bson:"description"`
	// Campaign start time
	// @gotags: db:"start_time" bson:"start_time"
	StartTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty" db:"start_time" bson:"start_time"`
	// Campaign end time
	// @gotags: db:"end_time" bson:"end_time"
	EndTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty" db:"end_time" bson:"end_time"`
	// Associated tasks
	// @gotags: db:"tasks" bson:"tasks"
	Tasks []*Task `protobuf:"bytes,6,rep,name=tasks,proto3" json:"tasks,omitempty" db:"tasks" bson:"tasks"`
	// Campaign mode
	// @gotags: db:"mode" bson:"mode"
	Mode CampaignMode `protobuf:"varint,7,opt,name=mode,proto3,enum=entity.domain.core.model.CampaignMode" json:"mode,omitempty" db:"mode" bson:"mode"`
	// Campaign status
	// @gotags: db:"status" bson:"status"
	Status CampaignStatus `protobuf:"varint,8,opt,name=status,proto3,enum=entity.domain.core.model.CampaignStatus" json:"status,omitempty" db:"status" bson:"status"`
	// Pool ID (if applicable)
	// @gotags: db:"pool_id" bson:"pool_id"
	PoolId string `protobuf:"bytes,9,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" db:"pool_id" bson:"pool_id"`
}

func (x *Campaign) Reset() {
	*x = Campaign{}
	mi := &file_entity_domain_core_model_model_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Campaign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Campaign) ProtoMessage() {}

func (x *Campaign) ProtoReflect() protoreflect.Message {
	mi := &file_entity_domain_core_model_model_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Campaign.ProtoReflect.Descriptor instead.
func (*Campaign) Descriptor() ([]byte, []int) {
	return file_entity_domain_core_model_model_proto_rawDescGZIP(), []int{3}
}

func (x *Campaign) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Campaign) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Campaign) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Campaign) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Campaign) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Campaign) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *Campaign) GetMode() CampaignMode {
	if x != nil {
		return x.Mode
	}
	return CampaignMode_CAMPAIGN_MODE_UNSPECIFIED
}

func (x *Campaign) GetStatus() CampaignStatus {
	if x != nil {
		return x.Status
	}
	return CampaignStatus_CAMPAIGN_STATUS_UNSPECIFIED
}

func (x *Campaign) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

// User entity
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// User name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Blockchain wallet address
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// Task completion status by task ID
	TaskProgress map[string]int64 `protobuf:"bytes,4,rep,name=task_progress,json=taskProgress,proto3" json:"task_progress,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Total points earned
	Points int64 `protobuf:"varint,5,opt,name=points,proto3" json:"points,omitempty"`
	// Associated transaction IDs
	TransactionIds []string `protobuf:"bytes,6,rep,name=transaction_ids,json=transactionIds,proto3" json:"transaction_ids,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_entity_domain_core_model_model_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_entity_domain_core_model_model_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_entity_domain_core_model_model_proto_rawDescGZIP(), []int{4}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *User) GetTaskProgress() map[string]int64 {
	if x != nil {
		return x.TaskProgress
	}
	return nil
}

func (x *User) GetPoints() int64 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *User) GetTransactionIds() []string {
	if x != nil {
		return x.TransactionIds
	}
	return nil
}

// Reward entity
type Reward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reward ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Associated user ID
	UserAddress string `protobuf:"bytes,2,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	// Associated campaign ID
	CampaignId string `protobuf:"bytes,3,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	// Points used to redeem the reward
	Points int64 `protobuf:"varint,4,opt,name=points,proto3" json:"points,omitempty"`
	// Redemption timestamp
	RedeemedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=redeemed_at,json=redeemedAt,proto3" json:"redeemed_at,omitempty"`
}

func (x *Reward) Reset() {
	*x = Reward{}
	mi := &file_entity_domain_core_model_model_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reward) ProtoMessage() {}

func (x *Reward) ProtoReflect() protoreflect.Message {
	mi := &file_entity_domain_core_model_model_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reward.ProtoReflect.Descriptor instead.
func (*Reward) Descriptor() ([]byte, []int) {
	return file_entity_domain_core_model_model_proto_rawDescGZIP(), []int{5}
}

func (x *Reward) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Reward) GetUserAddress() string {
	if x != nil {
		return x.UserAddress
	}
	return ""
}

func (x *Reward) GetCampaignId() string {
	if x != nil {
		return x.CampaignId
	}
	return ""
}

func (x *Reward) GetPoints() int64 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *Reward) GetRedeemedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RedeemedAt
	}
	return nil
}

// Transaction entity
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction hash (unique ID)
	// @gotags: db:"tx_hash"
	TxHash string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty" db:"tx_hash"`
	// Block number
	BlockNumber int64 `protobuf:"varint,11,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	// Sender address
	// @gotags: db:"from_address"
	FromAddress string `protobuf:"bytes,2,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" db:"from_address"`
	// Receiver address
	// @gotags: db:"to_address"
	ToAddress string `protobuf:"bytes,3,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty" db:"to_address"`
	// Transaction amount
	// @gotags: db:"amount"
	Amount int64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty" db:"amount"`
	// Transaction timestamp
	// @gotags: db:"timestamp"
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty" db:"timestamp"`
	// Task ID (optional)
	// @gotags: db:"task_id"
	TaskId string `protobuf:"bytes,6,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty" db:"task_id"`
	// Campaign ID (optional)
	// @gotags: db:"campaign_id"
	CampaignId string `protobuf:"bytes,7,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty" db:"campaign_id"`
	// Transaction status
	// @gotags: db:"status"
	Status TransactionStatus `protobuf:"varint,8,opt,name=status,proto3,enum=entity.domain.core.model.TransactionStatus" json:"status,omitempty" db:"status"`
	// Transaction type
	// @gotags: db:"type"
	Type TransactionType `protobuf:"varint,9,opt,name=type,proto3,enum=entity.domain.core.model.TransactionType" json:"type,omitempty" db:"type"`
	// Swap details (if applicable)
	SwapDetails []*SwapDetail `protobuf:"bytes,10,rep,name=swap_details,json=swapDetails,proto3" json:"swap_details,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	mi := &file_entity_domain_core_model_model_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_entity_domain_core_model_model_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_entity_domain_core_model_model_proto_rawDescGZIP(), []int{6}
}

func (x *Transaction) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *Transaction) GetBlockNumber() int64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Transaction) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *Transaction) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *Transaction) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Transaction) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Transaction) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *Transaction) GetCampaignId() string {
	if x != nil {
		return x.CampaignId
	}
	return ""
}

func (x *Transaction) GetStatus() TransactionStatus {
	if x != nil {
		return x.Status
	}
	return TransactionStatus_TRANSACTION_STATUS_UNSPECIFIED
}

func (x *Transaction) GetType() TransactionType {
	if x != nil {
		return x.Type
	}
	return TransactionType_TRANSACTION_TYPE_UNSPECIFIED
}

func (x *Transaction) GetSwapDetails() []*SwapDetail {
	if x != nil {
		return x.SwapDetails
	}
	return nil
}

// Swap details
type SwapDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token address being swapped from
	FromTokenAddress string `protobuf:"bytes,1,opt,name=from_token_address,json=fromTokenAddress,proto3" json:"from_token_address,omitempty"`
	// Token address being swapped to
	ToTokenAddress string `protobuf:"bytes,2,opt,name=to_token_address,json=toTokenAddress,proto3" json:"to_token_address,omitempty"`
	// Amount of the from_token
	FromTokenAmount string `protobuf:"bytes,3,opt,name=from_token_amount,json=fromTokenAmount,proto3" json:"from_token_amount,omitempty"`
	// Amount of the to_token
	ToTokenAmount string `protobuf:"bytes,4,opt,name=to_token_amount,json=toTokenAmount,proto3" json:"to_token_amount,omitempty"`
	// Pool address (if applicable)
	PoolAddress string `protobuf:"bytes,5,opt,name=pool_address,json=poolAddress,proto3" json:"pool_address,omitempty"`
}

func (x *SwapDetail) Reset() {
	*x = SwapDetail{}
	mi := &file_entity_domain_core_model_model_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwapDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapDetail) ProtoMessage() {}

func (x *SwapDetail) ProtoReflect() protoreflect.Message {
	mi := &file_entity_domain_core_model_model_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapDetail.ProtoReflect.Descriptor instead.
func (*SwapDetail) Descriptor() ([]byte, []int) {
	return file_entity_domain_core_model_model_proto_rawDescGZIP(), []int{7}
}

func (x *SwapDetail) GetFromTokenAddress() string {
	if x != nil {
		return x.FromTokenAddress
	}
	return ""
}

func (x *SwapDetail) GetToTokenAddress() string {
	if x != nil {
		return x.ToTokenAddress
	}
	return ""
}

func (x *SwapDetail) GetFromTokenAmount() string {
	if x != nil {
		return x.FromTokenAmount
	}
	return ""
}

func (x *SwapDetail) GetToTokenAmount() string {
	if x != nil {
		return x.ToTokenAmount
	}
	return ""
}

func (x *SwapDetail) GetPoolAddress() string {
	if x != nil {
		return x.PoolAddress
	}
	return ""
}

// Backtest result for a specific user
type BacktestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User ID associated with the result
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Total swaps performed by the user
	TotalSwaps int32 `protobuf:"varint,2,opt,name=total_swaps,json=totalSwaps,proto3" json:"total_swaps,omitempty"`
	// Total volume of swaps (USD)
	TotalVolume float64 `protobuf:"fixed64,3,opt,name=total_volume,json=totalVolume,proto3" json:"total_volume,omitempty"`
	// Points earned by the user
	PointsEarned int64 `protobuf:"varint,4,opt,name=points_earned,json=pointsEarned,proto3" json:"points_earned,omitempty"`
	// Task completion status
	TaskProgress map[string]int64 `protobuf:"bytes,5,rep,name=task_progress,json=taskProgress,proto3" json:"task_progress,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *BacktestResult) Reset() {
	*x = BacktestResult{}
	mi := &file_entity_domain_core_model_model_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BacktestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BacktestResult) ProtoMessage() {}

func (x *BacktestResult) ProtoReflect() protoreflect.Message {
	mi := &file_entity_domain_core_model_model_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BacktestResult.ProtoReflect.Descriptor instead.
func (*BacktestResult) Descriptor() ([]byte, []int) {
	return file_entity_domain_core_model_model_proto_rawDescGZIP(), []int{8}
}

func (x *BacktestResult) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BacktestResult) GetTotalSwaps() int32 {
	if x != nil {
		return x.TotalSwaps
	}
	return 0
}

func (x *BacktestResult) GetTotalVolume() float64 {
	if x != nil {
		return x.TotalVolume
	}
	return 0
}

func (x *BacktestResult) GetPointsEarned() int64 {
	if x != nil {
		return x.PointsEarned
	}
	return 0
}

func (x *BacktestResult) GetTaskProgress() map[string]int64 {
	if x != nil {
		return x.TaskProgress
	}
	return nil
}

// Backtest report for a campaign
type BacktestReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID for the report
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Associated campaign ID
	CampaignId string `protobuf:"bytes,2,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	// Total users involved in the backtest
	TotalUsers int32 `protobuf:"varint,3,opt,name=total_users,json=totalUsers,proto3" json:"total_users,omitempty"`
	// Total points distributed
	TotalPoints int64 `protobuf:"varint,4,opt,name=total_points,json=totalPoints,proto3" json:"total_points,omitempty"`
	// Timestamp for when the report was generated
	GeneratedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=generated_at,json=generatedAt,proto3" json:"generated_at,omitempty"`
	// List of individual backtest results
	UserResults []*BacktestResult `protobuf:"bytes,6,rep,name=user_results,json=userResults,proto3" json:"user_results,omitempty"`
}

func (x *BacktestReport) Reset() {
	*x = BacktestReport{}
	mi := &file_entity_domain_core_model_model_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BacktestReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BacktestReport) ProtoMessage() {}

func (x *BacktestReport) ProtoReflect() protoreflect.Message {
	mi := &file_entity_domain_core_model_model_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BacktestReport.ProtoReflect.Descriptor instead.
func (*BacktestReport) Descriptor() ([]byte, []int) {
	return file_entity_domain_core_model_model_proto_rawDescGZIP(), []int{9}
}

func (x *BacktestReport) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BacktestReport) GetCampaignId() string {
	if x != nil {
		return x.CampaignId
	}
	return ""
}

func (x *BacktestReport) GetTotalUsers() int32 {
	if x != nil {
		return x.TotalUsers
	}
	return 0
}

func (x *BacktestReport) GetTotalPoints() int64 {
	if x != nil {
		return x.TotalPoints
	}
	return 0
}

func (x *BacktestReport) GetGeneratedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.GeneratedAt
	}
	return nil
}

func (x *BacktestReport) GetUserResults() []*BacktestResult {
	if x != nil {
		return x.UserResults
	}
	return nil
}

var File_entity_domain_core_model_model_proto protoreflect.FileDescriptor

var file_entity_domain_core_model_model_proto_rawDesc = []byte{
	0x0a, 0x24, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x86, 0x02, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x3c, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5d, 0x0a, 0x0c, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x69,
	0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x0a, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x8f, 0x03, 0x0a, 0x08, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x12, 0x3a, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x22, 0x9d, 0x02, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x55,
	0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb1, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3b,
	0x0a, 0x0b, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe4, 0x03, 0x0a, 0x0b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66,
	0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x73, 0x77, 0x61,
	0x70, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0b, 0x73, 0x77, 0x61, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x0a, 0x53, 0x77, 0x61, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66,
	0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x74, 0x6f, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x6f, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0xb4, 0x02, 0x0a, 0x0e, 0x42, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x77, 0x61, 0x70, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45,
	0x61, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x5f, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x91, 0x02, 0x0a, 0x0e, 0x42, 0x61, 0x63, 0x6b,
	0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x3d, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4b,
	0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x42, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2a, 0x59, 0x0a, 0x08, 0x54,
	0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4f, 0x4e, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f,
	0x50, 0x4f, 0x4f, 0x4c, 0x10, 0x02, 0x2a, 0x5b, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x02, 0x2a, 0x66, 0x0a, 0x0c, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x41, 0x4d, 0x50, 0x41, 0x49, 0x47, 0x4e, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x41, 0x4d, 0x50, 0x41, 0x49, 0x47, 0x4e, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x43, 0x41, 0x4d, 0x50, 0x41, 0x49, 0x47, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x42, 0x41, 0x43, 0x4b, 0x54, 0x45, 0x53, 0x54, 0x10, 0x02, 0x2a, 0x89, 0x01, 0x0a, 0x0e,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f,
	0x0a, 0x1b, 0x43, 0x41, 0x4d, 0x50, 0x41, 0x49, 0x47, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1b, 0x0a, 0x17, 0x43, 0x41, 0x4d, 0x50, 0x41, 0x49, 0x47, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16,
	0x43, 0x41, 0x4d, 0x50, 0x41, 0x49, 0x47, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x41, 0x4d, 0x50,
	0x41, 0x49, 0x47, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x98, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a,
	0x1e, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x03, 0x2a, 0x89, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x57, 0x41, 0x50,
	0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x42, 0xf8,
	0x01, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x42,
	0x0a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x48, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x79, 0x61, 0x2f, 0x70, 0x65, 0x6c, 0x69, 0x74, 0x68, 0x2d, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x3b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0xa2, 0x02, 0x04, 0x45, 0x44, 0x43, 0x4d, 0xaa, 0x02,
	0x18, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43,
	0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0xca, 0x02, 0x18, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x43, 0x6f, 0x72, 0x65, 0x5c, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0xe2, 0x02, 0x24, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5c, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x43, 0x6f, 0x72, 0x65, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1b, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x3a, 0x3a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x3a, 0x3a, 0x43, 0x6f,
	0x72, 0x65, 0x3a, 0x3a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_entity_domain_core_model_model_proto_rawDescOnce sync.Once
	file_entity_domain_core_model_model_proto_rawDescData = file_entity_domain_core_model_model_proto_rawDesc
)

func file_entity_domain_core_model_model_proto_rawDescGZIP() []byte {
	file_entity_domain_core_model_model_proto_rawDescOnce.Do(func() {
		file_entity_domain_core_model_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_entity_domain_core_model_model_proto_rawDescData)
	})
	return file_entity_domain_core_model_model_proto_rawDescData
}

var file_entity_domain_core_model_model_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_entity_domain_core_model_model_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_entity_domain_core_model_model_proto_goTypes = []any{
	(TaskType)(0),                 // 0: entity.domain.core.model.TaskType
	(TaskStatus)(0),               // 1: entity.domain.core.model.TaskStatus
	(CampaignMode)(0),             // 2: entity.domain.core.model.CampaignMode
	(CampaignStatus)(0),           // 3: entity.domain.core.model.CampaignStatus
	(TransactionStatus)(0),        // 4: entity.domain.core.model.TransactionStatus
	(TransactionType)(0),          // 5: entity.domain.core.model.TransactionType
	(*Task)(nil),                  // 6: entity.domain.core.model.Task
	(*TaskCriteria)(nil),          // 7: entity.domain.core.model.TaskCriteria
	(*TaskResult)(nil),            // 8: entity.domain.core.model.TaskResult
	(*Campaign)(nil),              // 9: entity.domain.core.model.Campaign
	(*User)(nil),                  // 10: entity.domain.core.model.User
	(*Reward)(nil),                // 11: entity.domain.core.model.Reward
	(*Transaction)(nil),           // 12: entity.domain.core.model.Transaction
	(*SwapDetail)(nil),            // 13: entity.domain.core.model.SwapDetail
	(*BacktestResult)(nil),        // 14: entity.domain.core.model.BacktestResult
	(*BacktestReport)(nil),        // 15: entity.domain.core.model.BacktestReport
	nil,                           // 16: entity.domain.core.model.User.TaskProgressEntry
	nil,                           // 17: entity.domain.core.model.BacktestResult.TaskProgressEntry
	(*timestamppb.Timestamp)(nil), // 18: google.protobuf.Timestamp
}
var file_entity_domain_core_model_model_proto_depIdxs = []int32{
	0,  // 0: entity.domain.core.model.Task.type:type_name -> entity.domain.core.model.TaskType
	7,  // 1: entity.domain.core.model.Task.criteria:type_name -> entity.domain.core.model.TaskCriteria
	1,  // 2: entity.domain.core.model.Task.status:type_name -> entity.domain.core.model.TaskStatus
	18, // 3: entity.domain.core.model.Campaign.start_time:type_name -> google.protobuf.Timestamp
	18, // 4: entity.domain.core.model.Campaign.end_time:type_name -> google.protobuf.Timestamp
	6,  // 5: entity.domain.core.model.Campaign.tasks:type_name -> entity.domain.core.model.Task
	2,  // 6: entity.domain.core.model.Campaign.mode:type_name -> entity.domain.core.model.CampaignMode
	3,  // 7: entity.domain.core.model.Campaign.status:type_name -> entity.domain.core.model.CampaignStatus
	16, // 8: entity.domain.core.model.User.task_progress:type_name -> entity.domain.core.model.User.TaskProgressEntry
	18, // 9: entity.domain.core.model.Reward.redeemed_at:type_name -> google.protobuf.Timestamp
	18, // 10: entity.domain.core.model.Transaction.timestamp:type_name -> google.protobuf.Timestamp
	4,  // 11: entity.domain.core.model.Transaction.status:type_name -> entity.domain.core.model.TransactionStatus
	5,  // 12: entity.domain.core.model.Transaction.type:type_name -> entity.domain.core.model.TransactionType
	13, // 13: entity.domain.core.model.Transaction.swap_details:type_name -> entity.domain.core.model.SwapDetail
	17, // 14: entity.domain.core.model.BacktestResult.task_progress:type_name -> entity.domain.core.model.BacktestResult.TaskProgressEntry
	18, // 15: entity.domain.core.model.BacktestReport.generated_at:type_name -> google.protobuf.Timestamp
	14, // 16: entity.domain.core.model.BacktestReport.user_results:type_name -> entity.domain.core.model.BacktestResult
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_entity_domain_core_model_model_proto_init() }
func file_entity_domain_core_model_model_proto_init() {
	if File_entity_domain_core_model_model_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_entity_domain_core_model_model_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_entity_domain_core_model_model_proto_goTypes,
		DependencyIndexes: file_entity_domain_core_model_model_proto_depIdxs,
		EnumInfos:         file_entity_domain_core_model_model_proto_enumTypes,
		MessageInfos:      file_entity_domain_core_model_model_proto_msgTypes,
	}.Build()
	File_entity_domain_core_model_model_proto = out.File
	file_entity_domain_core_model_model_proto_rawDesc = nil
	file_entity_domain_core_model_model_proto_goTypes = nil
	file_entity_domain_core_model_model_proto_depIdxs = nil
}
