// Code generated by MockGen. DO NOT EDIT.
// Source: reward.go
//
// Generated by this command:
//
//	mockgen -destination=./mock_reward.go -package=query -source=reward.go
//

// Package query is a generated GoMock package.
package query

import (
	"context"
	"reflect"

	"github.com/blackhorseya/pelith-assessment/entity/domain/core/biz"
	"go.uber.org/mock/gomock"
)

// MockRewardGetter is a mock of RewardGetter interface.
type MockRewardGetter struct {
	ctrl     *gomock.Controller
	recorder *MockRewardGetterMockRecorder
}

// MockRewardGetterMockRecorder is the mock recorder for MockRewardGetter.
type MockRewardGetterMockRecorder struct {
	mock *MockRewardGetter
}

// NewMockRewardGetter creates a new mock instance.
func NewMockRewardGetter(ctrl *gomock.Controller) *MockRewardGetter {
	mock := &MockRewardGetter{ctrl: ctrl}
	mock.recorder = &MockRewardGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRewardGetter) EXPECT() *MockRewardGetterMockRecorder {
	return m.recorder
}

// GetByAddress mocks base method.
func (m *MockRewardGetter) GetByAddress(c context.Context, address string) ([]*biz.Reward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAddress", c, address)
	ret0, _ := ret[0].([]*biz.Reward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAddress indicates an expected call of GetByAddress.
func (mr *MockRewardGetterMockRecorder) GetByAddress(c, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAddress", reflect.TypeOf((*MockRewardGetter)(nil).GetByAddress), c, address)
}
