// Code generated by MockGen. DO NOT EDIT.
// Source: task.go
//
// Generated by this command:
//
//	mockgen -destination=./mock_task.go -package=command -source=task.go
//

// Package command is a generated GoMock package.
package command

import (
	context "context"
	reflect "reflect"

	model "github.com/blackhorseya/pelith-assessment/entity/domain/core/model"
	gomock "go.uber.org/mock/gomock"
)

// MockTaskCreator is a mock of TaskCreator interface.
type MockTaskCreator struct {
	ctrl     *gomock.Controller
	recorder *MockTaskCreatorMockRecorder
}

// MockTaskCreatorMockRecorder is the mock recorder for MockTaskCreator.
type MockTaskCreatorMockRecorder struct {
	mock *MockTaskCreator
}

// NewMockTaskCreator creates a new mock instance.
func NewMockTaskCreator(ctrl *gomock.Controller) *MockTaskCreator {
	mock := &MockTaskCreator{ctrl: ctrl}
	mock.recorder = &MockTaskCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskCreator) EXPECT() *MockTaskCreatorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTaskCreator) Create(c context.Context, task *model.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTaskCreatorMockRecorder) Create(c, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskCreator)(nil).Create), c, task)
}
