// Code generated by MockGen. DO NOT EDIT.
// Source: campaign.go
//
// Generated by this command:
//
//	mockgen -destination=./mock_campaign.go -package=query -source=campaign.go
//

// Package query is a generated GoMock package.
package query

import (
	context "context"
	reflect "reflect"

	model "github.com/blackhorseya/pelith-assessment/entity/domain/core/model"
	gomock "go.uber.org/mock/gomock"
)

// MockCampaignGetter is a mock of CampaignGetter interface.
type MockCampaignGetter struct {
	ctrl     *gomock.Controller
	recorder *MockCampaignGetterMockRecorder
}

// MockCampaignGetterMockRecorder is the mock recorder for MockCampaignGetter.
type MockCampaignGetterMockRecorder struct {
	mock *MockCampaignGetter
}

// NewMockCampaignGetter creates a new mock instance.
func NewMockCampaignGetter(ctrl *gomock.Controller) *MockCampaignGetter {
	mock := &MockCampaignGetter{ctrl: ctrl}
	mock.recorder = &MockCampaignGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCampaignGetter) EXPECT() *MockCampaignGetterMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockCampaignGetter) GetByID(c context.Context, id string) (*model.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", c, id)
	ret0, _ := ret[0].(*model.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCampaignGetterMockRecorder) GetByID(c, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCampaignGetter)(nil).GetByID), c, id)
}

// List mocks base method.
func (m *MockCampaignGetter) List(c context.Context, cond ListCampaignCondition) ([]*model.Campaign, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", c, cond)
	ret0, _ := ret[0].([]*model.Campaign)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockCampaignGetterMockRecorder) List(c, cond any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCampaignGetter)(nil).List), c, cond)
}
