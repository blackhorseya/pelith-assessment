// Code generated by MockGen. DO NOT EDIT.
// Source: transaction.go
//
// Generated by this command:
//
//	mockgen -destination=./mock_transaction.go -package=query -source=transaction.go
//

// Package query is a generated GoMock package.
package query

import (
	context "context"
	reflect "reflect"

	biz "github.com/blackhorseya/pelith-assessment/entity/domain/core/biz"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionAdapter is a mock of TransactionAdapter interface.
type MockTransactionAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionAdapterMockRecorder
}

// MockTransactionAdapterMockRecorder is the mock recorder for MockTransactionAdapter.
type MockTransactionAdapterMockRecorder struct {
	mock *MockTransactionAdapter
}

// NewMockTransactionAdapter creates a new mock instance.
func NewMockTransactionAdapter(ctrl *gomock.Controller) *MockTransactionAdapter {
	mock := &MockTransactionAdapter{ctrl: ctrl}
	mock.recorder = &MockTransactionAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionAdapter) EXPECT() *MockTransactionAdapterMockRecorder {
	return m.recorder
}

// GetSwapTxByPoolAddress mocks base method.
func (m *MockTransactionAdapter) GetSwapTxByPoolAddress(c context.Context, address string, cond ListTransactionCondition, txCh chan<- *biz.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwapTxByPoolAddress", c, address, cond, txCh)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSwapTxByPoolAddress indicates an expected call of GetSwapTxByPoolAddress.
func (mr *MockTransactionAdapterMockRecorder) GetSwapTxByPoolAddress(c, address, cond, txCh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwapTxByPoolAddress", reflect.TypeOf((*MockTransactionAdapter)(nil).GetSwapTxByPoolAddress), c, address, cond, txCh)
}

// MockTransactionGetter is a mock of TransactionGetter interface.
type MockTransactionGetter struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionGetterMockRecorder
}

// MockTransactionGetterMockRecorder is the mock recorder for MockTransactionGetter.
type MockTransactionGetterMockRecorder struct {
	mock *MockTransactionGetter
}

// NewMockTransactionGetter creates a new mock instance.
func NewMockTransactionGetter(ctrl *gomock.Controller) *MockTransactionGetter {
	mock := &MockTransactionGetter{ctrl: ctrl}
	mock.recorder = &MockTransactionGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionGetter) EXPECT() *MockTransactionGetterMockRecorder {
	return m.recorder
}

// GetByHash mocks base method.
func (m *MockTransactionGetter) GetByHash(c context.Context, hash string) (*biz.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByHash", c, hash)
	ret0, _ := ret[0].(*biz.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByHash indicates an expected call of GetByHash.
func (mr *MockTransactionGetterMockRecorder) GetByHash(c, hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByHash", reflect.TypeOf((*MockTransactionGetter)(nil).GetByHash), c, hash)
}

// GetLogsByAddress mocks base method.
func (m *MockTransactionGetter) GetLogsByAddress(c context.Context, contractAddress string, cond GetLogsCondition) (biz.TransactionList, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogsByAddress", c, contractAddress, cond)
	ret0, _ := ret[0].(biz.TransactionList)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLogsByAddress indicates an expected call of GetLogsByAddress.
func (mr *MockTransactionGetterMockRecorder) GetLogsByAddress(c, contractAddress, cond any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogsByAddress", reflect.TypeOf((*MockTransactionGetter)(nil).GetLogsByAddress), c, contractAddress, cond)
}

// ListByAddress mocks base method.
func (m *MockTransactionGetter) ListByAddress(c context.Context, address string, cond ListTransactionCondition) (biz.TransactionList, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByAddress", c, address, cond)
	ret0, _ := ret[0].(biz.TransactionList)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByAddress indicates an expected call of ListByAddress.
func (mr *MockTransactionGetterMockRecorder) ListByAddress(c, address, cond any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByAddress", reflect.TypeOf((*MockTransactionGetter)(nil).ListByAddress), c, address, cond)
}
