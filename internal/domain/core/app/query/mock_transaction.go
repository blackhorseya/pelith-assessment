// Code generated by MockGen. DO NOT EDIT.
// Source: transaction.go
//
// Generated by this command:
//
//	mockgen -destination=./mock_transaction.go -package=query -source=transaction.go
//

// Package query is a generated GoMock package.
package query

import (
	context "context"
	reflect "reflect"

	biz "github.com/blackhorseya/pelith-assessment/entity/domain/core/biz"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionRepo is a mock of TransactionRepo interface.
type MockTransactionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepoMockRecorder
}

// MockTransactionRepoMockRecorder is the mock recorder for MockTransactionRepo.
type MockTransactionRepoMockRecorder struct {
	mock *MockTransactionRepo
}

// NewMockTransactionRepo creates a new mock instance.
func NewMockTransactionRepo(ctrl *gomock.Controller) *MockTransactionRepo {
	mock := &MockTransactionRepo{ctrl: ctrl}
	mock.recorder = &MockTransactionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepo) EXPECT() *MockTransactionRepoMockRecorder {
	return m.recorder
}

// GetSwapTxByPoolAddress mocks base method.
func (m *MockTransactionRepo) GetSwapTxByPoolAddress(c context.Context, address string, cond ListTransactionCondition, txCh chan<- *biz.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwapTxByPoolAddress", c, address, cond, txCh)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSwapTxByPoolAddress indicates an expected call of GetSwapTxByPoolAddress.
func (mr *MockTransactionRepoMockRecorder) GetSwapTxByPoolAddress(c, address, cond, txCh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwapTxByPoolAddress", reflect.TypeOf((*MockTransactionRepo)(nil).GetSwapTxByPoolAddress), c, address, cond, txCh)
}

// GetSwapTxByUserAddressAndPoolAddress mocks base method.
func (m *MockTransactionRepo) GetSwapTxByUserAddressAndPoolAddress(c context.Context, address, poolAddress string, cond ListTransactionCondition, txCh chan<- *biz.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwapTxByUserAddressAndPoolAddress", c, address, poolAddress, cond, txCh)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSwapTxByUserAddressAndPoolAddress indicates an expected call of GetSwapTxByUserAddressAndPoolAddress.
func (mr *MockTransactionRepoMockRecorder) GetSwapTxByUserAddressAndPoolAddress(c, address, poolAddress, cond, txCh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwapTxByUserAddressAndPoolAddress", reflect.TypeOf((*MockTransactionRepo)(nil).GetSwapTxByUserAddressAndPoolAddress), c, address, poolAddress, cond, txCh)
}

// MockTransactionAdapter is a mock of TransactionAdapter interface.
type MockTransactionAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionAdapterMockRecorder
}

// MockTransactionAdapterMockRecorder is the mock recorder for MockTransactionAdapter.
type MockTransactionAdapterMockRecorder struct {
	mock *MockTransactionAdapter
}

// NewMockTransactionAdapter creates a new mock instance.
func NewMockTransactionAdapter(ctrl *gomock.Controller) *MockTransactionAdapter {
	mock := &MockTransactionAdapter{ctrl: ctrl}
	mock.recorder = &MockTransactionAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionAdapter) EXPECT() *MockTransactionAdapterMockRecorder {
	return m.recorder
}

// GetSwapTxByPoolAddress mocks base method.
func (m *MockTransactionAdapter) GetSwapTxByPoolAddress(c context.Context, contractAddress string, txCh chan<- *biz.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwapTxByPoolAddress", c, contractAddress, txCh)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSwapTxByPoolAddress indicates an expected call of GetSwapTxByPoolAddress.
func (mr *MockTransactionAdapterMockRecorder) GetSwapTxByPoolAddress(c, contractAddress, txCh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwapTxByPoolAddress", reflect.TypeOf((*MockTransactionAdapter)(nil).GetSwapTxByPoolAddress), c, contractAddress, txCh)
}
