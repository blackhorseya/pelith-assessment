// Code generated by MockGen. DO NOT EDIT.
// Source: task.go
//
// Generated by this command:
//
//	mockgen -destination=./mock_task.go -package=query -source=task.go
//

// Package query is a generated GoMock package.
package query

import (
	context "context"
	reflect "reflect"

	biz "github.com/blackhorseya/pelith-assessment/entity/domain/core/biz"
	gomock "go.uber.org/mock/gomock"
)

// MockTaskGetter is a mock of TaskGetter interface.
type MockTaskGetter struct {
	ctrl     *gomock.Controller
	recorder *MockTaskGetterMockRecorder
}

// MockTaskGetterMockRecorder is the mock recorder for MockTaskGetter.
type MockTaskGetterMockRecorder struct {
	mock *MockTaskGetter
}

// NewMockTaskGetter creates a new mock instance.
func NewMockTaskGetter(ctrl *gomock.Controller) *MockTaskGetter {
	mock := &MockTaskGetter{ctrl: ctrl}
	mock.recorder = &MockTaskGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskGetter) EXPECT() *MockTaskGetterMockRecorder {
	return m.recorder
}

// ListTask mocks base method.
func (m *MockTaskGetter) ListTask(c context.Context, cond ListTaskCondition) ([]*biz.Task, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTask", c, cond)
	ret0, _ := ret[0].([]*biz.Task)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTask indicates an expected call of ListTask.
func (mr *MockTaskGetterMockRecorder) ListTask(c, cond any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTask", reflect.TypeOf((*MockTaskGetter)(nil).ListTask), c, cond)
}
