// Code generated by MockGen. DO NOT EDIT.
// Source: campaign.go
//
// Generated by this command:
//
//	mockgen -destination=./mock_campaign.go -package=repo -source=campaign.go
//

// Package repo is a generated GoMock package.
package repo

import (
	context "context"
	reflect "reflect"

	biz "github.com/blackhorseya/pelith-assessment/entity/domain/core/biz"
	model "github.com/blackhorseya/pelith-assessment/entity/domain/core/model"
	gomock "go.uber.org/mock/gomock"
)

// MockCampaignCreator is a mock of CampaignCreator interface.
type MockCampaignCreator struct {
	ctrl     *gomock.Controller
	recorder *MockCampaignCreatorMockRecorder
}

// MockCampaignCreatorMockRecorder is the mock recorder for MockCampaignCreator.
type MockCampaignCreatorMockRecorder struct {
	mock *MockCampaignCreator
}

// NewMockCampaignCreator creates a new mock instance.
func NewMockCampaignCreator(ctrl *gomock.Controller) *MockCampaignCreator {
	mock := &MockCampaignCreator{ctrl: ctrl}
	mock.recorder = &MockCampaignCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCampaignCreator) EXPECT() *MockCampaignCreatorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCampaignCreator) Create(c context.Context, campaign *biz.Campaign) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c, campaign)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCampaignCreatorMockRecorder) Create(c, campaign any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCampaignCreator)(nil).Create), c, campaign)
}

// MockCampaignUpdater is a mock of CampaignUpdater interface.
type MockCampaignUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockCampaignUpdaterMockRecorder
}

// MockCampaignUpdaterMockRecorder is the mock recorder for MockCampaignUpdater.
type MockCampaignUpdaterMockRecorder struct {
	mock *MockCampaignUpdater
}

// NewMockCampaignUpdater creates a new mock instance.
func NewMockCampaignUpdater(ctrl *gomock.Controller) *MockCampaignUpdater {
	mock := &MockCampaignUpdater{ctrl: ctrl}
	mock.recorder = &MockCampaignUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCampaignUpdater) EXPECT() *MockCampaignUpdaterMockRecorder {
	return m.recorder
}

// UpdateStatus mocks base method.
func (m *MockCampaignUpdater) UpdateStatus(c context.Context, id string, status model.CampaignStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", c, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockCampaignUpdaterMockRecorder) UpdateStatus(c, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockCampaignUpdater)(nil).UpdateStatus), c, id, status)
}

// MockCampaignFinder is a mock of CampaignFinder interface.
type MockCampaignFinder struct {
	ctrl     *gomock.Controller
	recorder *MockCampaignFinderMockRecorder
}

// MockCampaignFinderMockRecorder is the mock recorder for MockCampaignFinder.
type MockCampaignFinderMockRecorder struct {
	mock *MockCampaignFinder
}

// NewMockCampaignFinder creates a new mock instance.
func NewMockCampaignFinder(ctrl *gomock.Controller) *MockCampaignFinder {
	mock := &MockCampaignFinder{ctrl: ctrl}
	mock.recorder = &MockCampaignFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCampaignFinder) EXPECT() *MockCampaignFinderMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockCampaignFinder) GetByID(c context.Context, id string) (*biz.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", c, id)
	ret0, _ := ret[0].(*biz.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCampaignFinderMockRecorder) GetByID(c, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCampaignFinder)(nil).GetByID), c, id)
}

// List mocks base method.
func (m *MockCampaignFinder) List(c context.Context, cond ListCampaignCondition) ([]*biz.Campaign, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", c, cond)
	ret0, _ := ret[0].([]*biz.Campaign)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockCampaignFinderMockRecorder) List(c, cond any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCampaignFinder)(nil).List), c, cond)
}
