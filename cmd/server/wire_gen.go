// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"os"

	command2 "github.com/blackhorseya/pelith-assessment/internal/domain/app/command"
	query2 "github.com/blackhorseya/pelith-assessment/internal/domain/app/query"
	biz2 "github.com/blackhorseya/pelith-assessment/internal/domain/biz"
	"github.com/blackhorseya/pelith-assessment/internal/domain/infra/composite"
	"github.com/blackhorseya/pelith-assessment/internal/domain/infra/external/etherscan"
	pg2 "github.com/blackhorseya/pelith-assessment/internal/domain/infra/storage/pg"
	grpc2 "github.com/blackhorseya/pelith-assessment/internal/domain/infra/transports/grpc"
	http2 "github.com/blackhorseya/pelith-assessment/internal/domain/infra/transports/http"
	"github.com/blackhorseya/pelith-assessment/internal/shared/configx"
	"github.com/blackhorseya/pelith-assessment/internal/shared/grpcx"
	"github.com/blackhorseya/pelith-assessment/internal/shared/httpx"
	"github.com/blackhorseya/pelith-assessment/internal/shared/pgx"
	"github.com/blackhorseya/pelith-assessment/pkg/adapterx"
	"github.com/spf13/viper"
)

// Injectors from wire.go:

func NewCmd(v *viper.Viper) (adapterx.Server, func(), error) {
	configx, err := initConfigx(v)
	if err != nil {
		return nil, nil, err
	}
	application, err := initAPP(configx)
	if err != nil {
		return nil, nil, err
	}
	injector := &Injector{
		C: configx,
		A: application,
	}
	db, err := pgx.NewClient(application)
	if err != nil {
		return nil, nil, err
	}
	rewardRepoImpl, err := pg2.NewRewardRepo(db)
	if err != nil {
		return nil, nil, err
	}
	rewardGetter, err := pg2.NewRewardGetter(rewardRepoImpl)
	if err != nil {
		return nil, nil, err
	}
	rewardQueryStore := query2.NewRewardQueryStore(rewardGetter)
	campaignRepoImpl, err := pg2.NewCampaignRepo(db)
	if err != nil {
		return nil, nil, err
	}
	campaignGetter, err := pg2.NewCampaignGetter(campaignRepoImpl)
	if err != nil {
		return nil, nil, err
	}
	transactionRepoImpl, err := pg2.NewTransactionRepoImpl(db)
	if err != nil {
		return nil, nil, err
	}
	etherscanTransactionRepoImpl, err := etherscan.NewTransactionRepoImpl(application)
	if err != nil {
		return nil, nil, err
	}
	transactionCompositeRepoImpl := composite.NewTransactionCompositeRepoImpl(transactionRepoImpl, etherscanTransactionRepoImpl)
	transactionRepo := composite.NewTransactionRepoImpl(transactionCompositeRepoImpl)
	userService := biz2.NewUserService(campaignGetter, transactionRepo)
	userQueryStore := query2.NewUserQueryStore(userService)
	queryController := http2.NewQueryController(rewardQueryStore, userQueryStore)
	client, err := grpcx.NewClient(configx)
	if err != nil {
		return nil, nil, err
	}
	campaignServiceClient, err := grpc2.NewCampaignServiceClient(client)
	if err != nil {
		return nil, nil, err
	}
	campaignUpdater, err := pg2.NewCampaignUpdater(campaignRepoImpl)
	if err != nil {
		return nil, nil, err
	}
	backtestService := biz2.NewBacktestService(transactionCompositeRepoImpl)
	transactionAdapter := etherscan.NewTransactionAdapter(etherscanTransactionRepoImpl)
	startCampaignHandler := command2.NewStartCampaignHandler(campaignGetter, campaignUpdater, backtestService, transactionAdapter)
	commandController := http2.NewCommandController(campaignServiceClient, startCampaignHandler)
	initRoutes := http2.NewInitUserRoutesFn(queryController, commandController, campaignServiceClient)
	ginServer, err := httpx.NewGinServer(application, initRoutes)
	if err != nil {
		return nil, nil, err
	}
	campaignService := biz2.NewCampaignService()
	campaignCreator, err := pg2.NewCampaignCreator(campaignRepoImpl)
	if err != nil {
		return nil, nil, err
	}
	createCampaignHandler := command2.NewCreateCampaignHandler(campaignService, campaignCreator)
	taskService := biz2.NewTaskService()
	taskRepoImpl := pg2.NewTaskRepo(db)
	taskCreator := pg2.NewTaskCreator(taskRepoImpl)
	addTaskHandler := command2.NewAddTaskHandler(campaignService, campaignGetter, taskService, taskCreator)
	campaignDeleter, err := pg2.NewCampaignDeleter(campaignRepoImpl)
	if err != nil {
		return nil, nil, err
	}
	runBacktestHandler := command2.NewRunBacktestHandler(backtestService, campaignGetter, campaignUpdater, campaignDeleter)
	campaignServiceServer := grpc2.NewCampaignServer(createCampaignHandler, addTaskHandler, startCampaignHandler, runBacktestHandler, campaignGetter)
	initServers := grpc2.NewInitServersFn(campaignServiceServer)
	healthServer := grpc2.NewHealthServer()
	server, err := grpcx.NewServer(application, initServers, healthServer)
	if err != nil {
		return nil, nil, err
	}
	adapterxServer := newImpl(injector, ginServer, server)
	return adapterxServer, func() {
	}, nil
}

// wire.go:

const serviceName = "server"

func initConfigx(v *viper.Viper) (*configx.Configx, error) {
	return configx.LoadConfig(v.GetString("config"))
}

func initAPP(config *configx.Configx) (*configx.Application, error) {
	app, err := config.GetService(serviceName)
	if err != nil {
		return nil, err
	}

	if app.Etherscan.APIKey == "" {
		app.Etherscan.APIKey = os.Getenv("ETHERSCAN_API_KEY")
	}

	if app.Infura.ProjectID == "" {
		app.Infura.ProjectID = os.Getenv("INFURA_PROJECT_ID")
	}

	return app, nil
}
